version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag_postgres
    environment:
      POSTGRES_DB: DocumentManagement
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - rag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d 1234"]
      interval: 10s
      timeout: 5s
      retries: 5



  # NestJS Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag_backend
    env_file:
      - backend/.env
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Backend (Python)
  rag-backend:
    build:
      context: ./rag-backend
      dockerfile: Dockerfile
    container_name: rag_rag_backend
    env_file:
      - rag-backend/.env
    # environment:
    #   AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    #   AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    #   AWS_REGION: us-east-1
    #   AWS_SQS_QUEUE_URL: ${AWS_SQS_QUEUE_URL}
    #   AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    #   OLLAMA_BASE_URL: http://ollama:11434
    #   OLLAMA_MODEL: llama2
    #   CHROMA_PERSIST_DIRECTORY: ./chroma_db
    #   NEST_API_BASE_URL: http://backend:3000
    #   NEST_API_KEY: ${NEST_API_KEY}
    #   NEST_SERVICE_SECRET: ${NEST_SERVICE_SECRET}
    #   MAX_SQS_ATTEMPTS: 3
    ports:
      - "8000:8000"
    depends_on:
      - backend
      - ollama
    volumes:
      - ./rag-backend:/app
      - rag_chroma_data:/app/chroma_db
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama for LLM
  ollama:
    image: ollama/ollama:latest
    container_name: rag_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag_frontend
    env_file:
      - frontend/.env
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - rag-backend
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  rag_chroma_data:
    driver: local

networks:
  rag_network:
    driver: bridge


